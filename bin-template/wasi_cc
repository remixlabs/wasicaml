#! /bin/sh

set -e

root='%ROOT%'

init=""

# figure out whether we create an executable
out=""
noexe=0
nextout=0
eh=0
for arg in "$@"; do
    if [ $nextout -gt 0 ]; then
        out="$arg"
        nextout=0
        case "$arg" in
            *.a | *.so | *.o)
                noexe=1 ;;
        esac
        break
    fi
    case "$arg" in
        -c | -E | -S | -fsyntax-only | --version | -v | -V | -MMD | -MM | -MD | -M )
            noexe=1 ;;
        -o)
            nextout=1 ;;
        -mexception-handling)
            eh=1 ;;
        -shared)
            echo "Shared libs not supported" >&2
            exit 1 ;;
    esac
done

# --stack-first: places the stack at the beginning of linear memory. It grows
# downwards, and a stack overflow causes that the addresses wrap across zero
# to high values that are guaranteed to be invalid - in other words, a stack
# overflow causes an exception. The downside is that the executables are
# somewhat larger because the data segment is placed at a higher address
# that takes more bytes in the code.

genwrapper=0
if [ $noexe -eq 0 ]; then
    genwrapper=1
    initobjs="$root/lib/initwasi.o"
    if [ $eh -gt 0 ]; then
        initobjs="$root/lib/initwasi_eh.o $root/lib/initwasi_eh_helpers.o"
    fi
    init="$initobjs -Wl,--stack-first -lwasi-emulated-process-clocks"
    case "$out" in
        *.wasm)
            genwrapper=0
            ;;
    esac
fi

"$root"/lib/wasi-sdk/bin/clang --sysroot="$root"/lib/wasi-sdk/share/wasi-sysroot $init -D_WASI_EMULATED_PROCESS_CLOCKS -Wno-unused-command-line-argument "$@"

if [ $genwrapper -gt 0 -a -f "$out" ]; then
    wasm=`mktemp tmp.XXXXXX`
    mv "$out" "$wasm"
    len=`cat "$wasm" | wc -c`
    cat %PREFIX%/bin/wasi_preamble > "$out"
    printf '\0LEN%d\n' $len >>"$out"
    cat "$wasm" >>"$out"
    chmod a+x "$out"
    rm "$wasm"
fi
